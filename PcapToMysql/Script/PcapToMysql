#!/usr/bin/env python
# coding: utf-8
import re

import dpkt
import os
import socket
import struct
import datetime
import pymysql

tcp_or_udp = {}
tcp_or_udp[6] = 'tcp'
tcp_or_udp[17] = 'udp'
tcp_or_udp[1] = 'icmp'
tcp_or_udp[2] = 'igmp'
starttime = datetime.datetime.now()

def table_exists(con,table_name) :#这个函数用来判断表是否存在
    sql = "show tables;"
    con.execute(sql)
    tables = [con.fetchall()]
    table_list = re.findall('(\'.*?\')',str(tables))
    table_list = [re.sub("'",'',each) for each in table_list]
    if table_name in table_list:
        return 1;#存在返回1
    else:
        return 0;#不存在返回0

def parseRadius(filepath,tableName,uuid):
    fpcap = open(filepath, 'rb')
    fpcap.seek(24, 0)
    string_data=fpcap.read(16)
    packet_num=0
    sql = "INSERT INTO`" + tableName + "`(`create_time`,`uuid`,`high_time_stamp`,`low_time_stamp`,`destination_address`," \
          + "`source_address`,`protocol`,`destination_port`,`source_port`,`seq`,`ack`,`sum`,`flag`,`offset`)" + "value(now(),"+str(uuid)+",%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
    res=[]

    num_sql=0
    while len(string_data)>=16:
        col = []
        pcap_packet_header = {}
        #pcap_packet_header['GMTtime'] = string_data[i:i + 4]
        # print("高位时间戳：")
        # print(int.from_bytes(pcap_packet_header['GMTtime'], byteorder='little', signed=False))
        GMTtime = int.from_bytes(string_data[0: 4], byteorder='little', signed=False);
        col.append(GMTtime)
        #pcap_packet_header['MicroTime'] = string_data[i + 4:i + 8]
        # print("低位时间戳：")
        # int.from_bytes(pcap_packet_header['len'],byteorder='little',signed=False)
        # print(int.from_bytes(pcap_packet_header['MicroTime'], byteorder='little', signed=False))
        MicroTime = int.from_bytes(string_data[4:8], byteorder='little', signed=False)
        col.append(MicroTime)
        #pcap_packet_header['caplen'] = string_data[i + 8:i + 12]
        pcap_packet_header['len'] = string_data[12:16]
        # 求出此包的包长len
        packet_len = struct.unpack('I', pcap_packet_header['len'])[0]

        # 写入此包数据
        string_data = ''
        string_data = fpcap.read(packet_len)
        # 数据部分以太帧读取
        if len(string_data)!=packet_len:
            break
        ether = dpkt.ethernet.Ethernet(string_data)
        # 判断为传输层为ip
        if ether.type == dpkt.ethernet.ETH_TYPE_IP:
            ip = ether.data  # ip数据包

            src = socket.inet_ntoa(ip.src)  # 源ip
            dst = socket.inet_ntoa(ip.dst)  # 目的ip
            col.append(str(src))
            col.append(str(dst))
            # print("*" * 40)
            # print("dst=" + str(dst))
            dst = str(dst)
            # print("src=" + str(src))
            src = str(src)
            # 传输层数据
            data = ip.data
            ip_pro = tcp_or_udp[ip.p]
            # print("协议：" + str(ip_pro))
            protocol = str(ip_pro)
            col.append(str(ip_pro))
            if str(ip_pro)=="icmp":
                col.append("")
                col.append("")
                col.append("")
                col.append("")
                col.append("")
                col.append("")
                col.append("")
            # 传输层为tcp 或者 udp 协议
            if isinstance(data, dpkt.tcp.TCP):
                dport = str(data.dport)
                col.append(str(data.dport))
                # print("目的端口号：" + str(dport))
                sport = str(data.sport)
                col.append(str(data.sport))
                # print("源端口号：" + str(sport))
                col.append(str(data.seq))#序列号
                col.append(str(data.ack))  #确认号
                col.append(str(data.sum)) #校验和
                col.append(str(data.flags))  # flags
                col.append(str(data._off))  # 偏移量
            if isinstance(data, dpkt.udp.UDP):
                dport = str(data.dport)
                col.append(str(data.dport))
                # print("目的端口号：" + str(dport))
                sport = str(data.sport)
                col.append(str(data.sport))
                # print("源端口号：" + str(sport))
                col.append("")
                col.append("")
                col.append("")
                col.append("")
                col.append("")
            packet_num += 1;
            if packet_num%10000==0:
                print("已经插入"+str(packet_num))
            num_sql+=1
            res.append(tuple(col))
            if num_sql==40:
                cursor.executemany(sql, res)
                db.commit()
                res.clear()
                num_sql = 0
        string_data = fpcap.read(16)

    print("总共包数：" + str(packet_num))
    if num_sql!=0:
        cursor.executemany(sql, res)
        db.commit()
        res.clear()



if __name__ == '__main__':
    dirPath = 'd:\\test\\'
    database = "ximenzi"
    uuid=123
    # 打开数据库连接
    db = pymysql.connect(host="localhost", user="root", password="123456", database="ximenzi", charset='utf8')
    # 使用cursor()方法获取操作游标
    cursor = db.cursor()
    for i, j, k in os.walk(dirPath):
        for m in k:
            filePath = dirPath + m
            print(m.split(".")[0])
            tableName = m.split(".")[0]
            cursor.execute('use ' + database)
            if (table_exists(cursor, tableName) == 1):
                print("表已经存在")
                break
            sql = """CREATE TABLE `""" + tableName + """` (
                             `id`  bigint NOT NULL AUTO_INCREMENT,
                             `create_time`   datetime,
                             `uuid` int, 
                              `high_time_stamp` varchar(20),
                              `low_time_stamp` varchar(20),
                              `destination_address` varchar(20),
                              `source_address` varchar(20),
                              `protocol` varchar(20) ,
                              `seq` varchar(20) ,
                              `ack` varchar(20) ,
                              `sum` varchar(20) ,
                              `flag` varchar(20) ,
                              `offset` varchar(20) ,
                              `destination_port` varchar(20) ,
                              `source_port` varchar(20),PRIMARY KEY(`id`))"""
            #print(sql)
            cursor.execute(sql)
            db.commit()
            parseRadius(filePath,tableName,uuid)
            db.close()
    endtime = datetime.datetime.now()
    print(endtime - starttime)
